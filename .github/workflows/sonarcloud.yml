name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install SonarCloud scanner
      run: curl -L https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip -o build-wrapper-linux-x86.zip && unzip build-wrapper-linux-x86.zip && rm build-wrapper-linux-x86.zip && curl -L https://sonarcloud.io/static/python/download-cli.py | python

    - name: Analyze with SonarCloud
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Añadir la variable de entorno "SONAR_TOKEN" con el valor de tu token de SonarCloud
      run: sonar-scanner -Dsonar.login="${SONAR_TOKEN}"

    - name: Verify cyclomatic complexity threshold
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        complexity=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/measures/component?component=${{ env.SONAR_PROJECT_KEY }}&metricKeys=complexity&additionalFields=metrics")
        complexity_threshold=$(grep 'sonar.cyclomaticcomplexity.threshold=' sonar-project.properties | sed 's/sonar.cyclomaticcomplexity.threshold=//')
        if [[ $complexity -gt $complexity_threshold ]]; then
          echo "Error: La complejidad ciclomática es demasiado alta (actual: $complexity, umbral: $complexity_threshold)."
          exit 1
        fi

    - name: Publish coverage report to SonarCloud
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Añadir la variable de entorno "SONAR_TOKEN" con el valor de tu token de SonarCloud
      run: sonar-scanner -Dsonar.login="${SONAR_TOKEN}" -Dsonar.python.coverage.reportPaths=coverage.xml






# name: SonarCloud Analysis

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   sonarcloud:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.8

#     - name: Install SonarCloud scanner
#       run: curl -L https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip -o build-wrapper-linux-x86.zip && unzip build-wrapper-linux-x86.zip && rm build-wrapper-linux-x86.zip && curl -L https://sonarcloud.io/static/python/download-cli.py | python

#     - name: Analyze with SonarCloud
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Añadir la variable de entorno "SONAR_TOKEN" con el valor de tu token de SonarCloud
#       run: sonar-scanner -Dsonar.login="${SONAR_TOKEN}"

#     - name: Publish coverage report to SonarCloud
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Añadir la variable de entorno "SONAR_TOKEN" con el valor de tu token de SonarCloud
#       run: sonar-scanner -Dsonar.login="${SONAR_TOKEN}" -Dsonar.python.coverage.reportPaths=coverage.xml
